version: "3.9"

volumes:
  mongodb_data:
  pgadmin_data:

networks:
  private_net:
    driver: bridge

services:
  mongodb:
    image: mongo:5
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASS}
    volumes:
      - mongodb_data:/data/db
    networks:
      - private_net
    healthcheck:
      test:
        ["CMD", "mongosh", "--username", "${MONGO_USER}", "--password", "${MONGO_PASS}", "--authenticationDatabase", "${MONGO_AUTH_DB}", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  postgres:
    image: postgres:14
    container_name: postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    networks:
      - private_net

  mysql:
    image: mysql:8
    container_name: mysql
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - private_net

  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_BASICAUTH=false
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_USER}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_PASS}
      - ME_CONFIG_MONGODB_AUTH_DATABASE=${MONGO_AUTH_DB}
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
      - ME_CONFIG_MONGODB_PORT=${MONGO_PORT}
      - ME_CONFIG_MONGODB_SERVER=${MONGO_HOST}
    depends_on:
      mongodb:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - private_net

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "8083:80"
    depends_on:
      - postgres
    networks:
      - private_net
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/misc/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    environment:
      PMA_HOST: mysql
      PMA_USER: ${MYSQL_USER}
      PMA_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "8082:80"
    depends_on:
      - mysql
    networks:
      - private_net

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - private_net

  monitoring_engine:
    build:
      context: .
      dockerfile: Dockerfile.monitoring
    container_name: monitoring_engine
    ports:
      - "8000:8000"
    depends_on:
      mongodb:
        condition: service_healthy
      prometheus:
        condition: service_started
    environment:
      - ALERT_EMAIL_FROM=${ALERT_EMAIL_FROM}
      - ALERT_EMAIL_TO=${ALERT_EMAIL_TO}
      - DEMO_MODE=0
      - GROQ_API_KEY=${GROQ_API_KEY}
      - GROQ_MODEL=${GROQ_MODEL}
      - JWT_SECRET=${JWT_SECRET}
      - MONGO_URI=${MONGO_URI}
      - PROMETHEUS_URL=${PROMETHEUS_URL}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - private_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 30s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "3000:3000"
    depends_on:
      monitoring_engine:
        condition: service_healthy
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL}
    networks:
      - private_net

  forecast_ui:
    build:
      context: ./forecast/forecast_ui
      dockerfile: Dockerfile.forecast_ui
    container_name: forecast_ui
    ports:
      - "8501:8501"
    volumes:
      - ./forecast:/forecast
    working_dir: /forecast/forecast_ui/app
    environment:
      - MONGO_USER=${MONGO_USER}
      - MONGO_PASS=${MONGO_PASS}
      - MONGO_AUTH_DB=${MONGO_AUTH_DB}
      - MONGO_HOST=${MONGO_HOST}
      - MONGO_PORT=${MONGO_PORT}
      - DB_NAME=${DB_NAME}
      - COLLECTION_NAME=${COLLECTION_NAME}
    networks:
      - private_net

  controller:
    build:
      context: .
      dockerfile: Dockerfile.controller
    container_name: controller
    environment:
      - CONTROLLER_USER_EMAIL=${CONTROLLER_USER_EMAIL}
      - CONTROLLER_USER_PASSWORD=${CONTROLLER_USER_PASSWORD}
      - MONITORING_ENGINE_URL=http://monitoring_engine:8000
    volumes:
      - ./logs:/app/logs
    depends_on:
      monitoring_engine:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - private_net