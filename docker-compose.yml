version: "3.9"

services:
  # ======================
  # MongoDB Database
  # ======================
  mongodb:
    image: mongo:5
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=secret
    volumes:
      - mongodb_data:/data/db
    networks:
      - private_net
    healthcheck:
      test:
        [
          "CMD",
          "mongosh",
          "--username",
          "admin",
          "--password",
          "secret",
          "--authenticationDatabase",
          "admin",
          "--eval",
          "db.adminCommand('ping')",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # ======================
  # Mongo Express UI
  # ======================
  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongodb
      - ME_CONFIG_MONGODB_PORT=27017
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=secret
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
      - ME_CONFIG_BASICAUTH=false
      - ME_CONFIG_MONGODB_AUTH_DATABASE=admin
    depends_on:
      mongodb:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - private_net

  # ======================
  # Prometheus Monitoring
  # ======================
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - private_net

  # ======================
  # Monitoring Engine (Backend API) - Production Mode
  # ======================
  monitoring_engine:
    build:
      context: .
      dockerfile: Dockerfile.monitoring
    container_name: monitoring_engine
    ports:
      - "8000:8000"
    depends_on:
      mongodb:
        condition: service_healthy
      prometheus:
        condition: service_started
    networks:
      - private_net
    environment:
      - MONGO_URI=mongodb://admin:secret@mongodb:27017
      - JWT_SECRET=2004@
      - GROQ_API_KEY=GROQ_API_KEY
      - GROQ_MODEL=llama3-8b-8192
      - PROMETHEUS_URL=http://prometheus:9090
      - SENDGRID_API_KEY=your_sendgrid_api_key
      - ALERT_EMAIL_FROM=your_email@example.com
      - ALERT_EMAIL_TO=your_email@example.com
      - DEMO_MODE=0
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 30s

  # ======================
  # Frontend React App - Production Mode
  # ======================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "3000:3000"
    networks:
      - private_net
    depends_on:
      monitoring_engine:
        condition: service_healthy
    environment:
      - REACT_APP_API_URL=http://localhost:8000

  postgres:
    image: postgres:14
    container_name: postgres
    environment:
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpass
      POSTGRES_DB: testdb
    ports:
      - "5432:5432"
    networks:
      - private_net

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: testuser@example.com
      PGADMIN_DEFAULT_PASSWORD: testpass
    ports:
      - "8083:80"
    depends_on:
      - postgres
    networks:
      - private_net
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/misc/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  mysql:
    image: mysql:8
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: rootpass
      MYSQL_DATABASE: testdb
      MYSQL_USER: testuser
      MYSQL_PASSWORD: testpass
    ports:
      - "3306:3306"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - private_net

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    environment:
      PMA_HOST: mysql
      PMA_USER: testuser
      PMA_PASSWORD: testpass
    ports:
      - "8082:80"
    depends_on:
      - mysql
    networks:
      - private_net

  exporter:
    build:
      context: ./forecast/exporter
      dockerfile: Dockerfile.exporter
    container_name: metrics_exporter
    working_dir: /forecast/exporter/app
    restart: unless-stopped
    depends_on:
      mongodb:
        condition: service_healthy
    volumes:
      - ./forecast:/forecast # Persist logs to host machine
    environment:
      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
      - MONGO_USER=admin
      - MONGO_PASS=secret
      - MONGO_AUTH_DB=admin
      - DB_NAME=appvital
      - COLLECTION_NAME=metrics_history
    networks:
      - private_net

  forecast_ui:
    build:
      context: ./forecast/forecast_ui
      dockerfile: Dockerfile.forecast_ui
    container_name: forecast_ui
    ports:
      - "8501:8501"
    volumes:
      - ./forecast:/forecast # âœ… Mount forecast folder
    working_dir: /forecast/forecast_ui/app
    depends_on:
      - exporter
    networks:
      - private_net

  controller:
    build:
      context: .
      dockerfile: Dockerfile.controller
    environment:
      - MONITORING_ENGINE_URL=http://monitoring_engine:8000
      - CONTROLLER_USER_EMAIL=testuser@example.com
      - CONTROLLER_USER_PASSWORD=testpass123
      # Add other env vars as needed
    depends_on:
      monitoring_engine:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - private_net

volumes:
  mongodb_data:
  pgadmin_data:

networks:
  private_net:
    driver: bridge
